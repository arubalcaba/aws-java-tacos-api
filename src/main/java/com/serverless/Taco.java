package com.serverless;


import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "serverless_tacos_table")
public class Taco {

    private static final Logger logger = LogManager.getLogger(Taco.class);

    private static final String TACO_TABLE_NAME = System.getenv("TACOS_TABLE_NAME");
    private DynamoDBAdapter adapter;
    private AmazonDynamoDB client;
    private DynamoDBMapper mapper;

    private String id;
    private String tacoType;
    private Float price;

    public Taco(){
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TACO_TABLE_NAME))
                .build();
        this.adapter = DynamoDBAdapter.getInstance();
        this.client = this.adapter.geDbClient();
        this.mapper = this.adapter.createDbMapper(mapperConfig);
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "tacoType")
    public String getTacoType() {
        return tacoType;
    }

    public void setTacoType(String tacoType) {
        this.tacoType = tacoType;
    }

    @DynamoDBAttribute(attributeName = "price")
    public Float getPrice() {
        return price;
    }

    public void setPrice(Float price) {
        this.price = price;
    }

    public List<Taco> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Taco> results = this.mapper.scan(Taco.class, scanExp);
        for (Taco p : results) {
            logger.info("Tacos - list(): " + p.toString());
        }
        return results;
    }

    public Taco get(String id) throws IOException {
        Taco taco = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Taco> queryExp = new DynamoDBQueryExpression<Taco>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Taco> result = this.mapper.query(Taco.class, queryExp);
        if (result.size() > 0) {
            taco = result.get(0);
            logger.info("Tacos - get(): taco - " + taco.toString());
        } else {
            logger.info("Tacos - get(): taco - Not Found.");
        }
        return taco;
    }


    public void save(Taco taco) throws IOException {
        logger.info("Tacos - save(): " + taco.toString());
        this.mapper.save(taco);
    }

    public Boolean delete(String id) throws IOException {
        Taco taco = null;

        // get product if exists
        taco = get(id);
        if (taco != null) {
            logger.info("Tacos - delete(): " + taco.toString());
            this.mapper.delete(taco);
        } else {
            logger.info("Tacos - delete(): taco - does not exist.");
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Taco{" +
                "id='" + id + '\'' +
                ", tacoType='" + tacoType + '\'' +
                ", price=" + price +
                '}';
    }
}
